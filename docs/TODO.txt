X - Style: use css modules for local styling

X - Change buttons from css classes to complete shared components (edit/submit/add)

X - DATABASE: Change id to uuidv4

X - api calls

X - api development

X - connect to database

X - Test all functionalities related to Create an user

X - Program to interfaces for controllers, use-cases, services and data-access
  X - Create interfaces
  X - Create implementations
  X - Contructors receives interfaces as args
  X - Test if it is working

X - Create express adapter between routes and controllers
  X - Remodel controllers to be framework agnostic

X - BDD tests for signin and create

X - Wrappers for controllers (initialize depedencies, validate request, open/close
database connection, handles no-business errors)

X - readonly for classes dependency

X - Test all functionalities related to SignIn an user

X - Create Functionality for get signed user by authToken

X - Unit and Bdd for Signed user by Token

X - Review UserDataAccess tests and add the missing ones

X - Review all the custom Errors

X - Authentication Context for logged in users (useReducer, and logout button in layout)

X - Validators from functions to static classes (Just form encapsulation)
  Obs: Different entities have the same name for attributes and it can be missguiding.

X - RequestValidator

X - RENAMES: change server files naming.
    Ex: from create.service.ts to create-user.service.ts
    Ex: from update.controller.ts to update-todo.controller.ts


X - SERVER: All types moved to type files and not lost in classes

  * There are 3 types of types:

     1 - interface specific type: Types from interface remains in the interface
       if they are really specific to that interface and makes the signature of
       that interface valid or invalid

     2 - domain types: Types shared through out the domain application, they are
       not to a specific scenario, they are more general purpose but must be strict
       and not allow any errors between modules inside the domain. They are also
       the rules that guides what comes in and out of the domain and act like DTOs

     3 - external types: Types that comes from outside world and are used inside
       of ports and adapters but must never breaks in the domain


0 - Folder struct for server:
    1 - domain:
      1.1 - interfaces: (adapters, controllers, data-access, services, use-cases,
        utils, controller-wrappers)
      1.2 - entities
      1.3 - errors (custom errors)
      1.4 - types
      1.5 - validators
    2 - adapters
    3 - controllers
    4 - data-accessors
    5 - services
    6 - use-cases
    7 - utils
    8 - controller-wrappers
    ** Remove the data-acces layer and make their impl in the service directly
    ** Put all services and useCases from entities together in a single class
    ** Separate User Services from Auth services
    ** Recude the types to a minimun
    ** Move types out off domain if they are not a must inside
    ** Try out with entities that throws errors when a value is not valid. The entity
      attrs will be readonly and validate in the constructor
    ** Add routes?
    ** ConnectionFactory with only getConnection => DatabaseConnection
    ** DatabaseConnection impl interface connect() closeConnection()
    ** Controller with readonly attrs
    ** Controller private constructor with getInstance()
    ** No more controllerWrappers and single interface to all controllers
    ** Each implementation folder can have its own types for its internal works


0 - ControllerAdapers are called in the routes and the route checks the framework used
and calls the right adapter

0 - Review all tests: to see if there are
    X - No expects inside conditionals or catch blocks
    X - use try/catch form success tests too
    X - Use ApiCaller for api requests
    X - Wipe the external dependencies in the tests (use adapters when needed)
    0 - Change to Given/When/Then
    0 - No more bahavior tests (controller test will substitute)

0 - TEST: add integrations test

0 - CRUD for Tasks

0 - CRUD for TODOs

0 - Connect cruds to views

0 - Form validation in general
  0 - Send submitButton props every page
  0 - Redirect to server error page when the error is unexpected

0 - HATEOAS to api routes

0 - SWAGGER

0 - Testing env using sqlite

0 - Deploy as Heroku App

-----------------

 X for done

 0 for NOT done

-----------------
